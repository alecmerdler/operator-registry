// Code generated by protoc-gen-go. DO NOT EDIT.
// source: registry.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Channel struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CsvName              string   `protobuf:"bytes,2,opt,name=csvName,proto3" json:"csvName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Channel) Reset()         { *m = Channel{} }
func (m *Channel) String() string { return proto.CompactTextString(m) }
func (*Channel) ProtoMessage()    {}
func (*Channel) Descriptor() ([]byte, []int) {
	return fileDescriptor_registry_5236593735313b11, []int{0}
}
func (m *Channel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Channel.Unmarshal(m, b)
}
func (m *Channel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Channel.Marshal(b, m, deterministic)
}
func (dst *Channel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Channel.Merge(dst, src)
}
func (m *Channel) XXX_Size() int {
	return xxx_messageInfo_Channel.Size(m)
}
func (m *Channel) XXX_DiscardUnknown() {
	xxx_messageInfo_Channel.DiscardUnknown(m)
}

var xxx_messageInfo_Channel proto.InternalMessageInfo

func (m *Channel) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Channel) GetCsvName() string {
	if m != nil {
		return m.CsvName
	}
	return ""
}

type PackageName struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PackageName) Reset()         { *m = PackageName{} }
func (m *PackageName) String() string { return proto.CompactTextString(m) }
func (*PackageName) ProtoMessage()    {}
func (*PackageName) Descriptor() ([]byte, []int) {
	return fileDescriptor_registry_5236593735313b11, []int{1}
}
func (m *PackageName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PackageName.Unmarshal(m, b)
}
func (m *PackageName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PackageName.Marshal(b, m, deterministic)
}
func (dst *PackageName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PackageName.Merge(dst, src)
}
func (m *PackageName) XXX_Size() int {
	return xxx_messageInfo_PackageName.Size(m)
}
func (m *PackageName) XXX_DiscardUnknown() {
	xxx_messageInfo_PackageName.DiscardUnknown(m)
}

var xxx_messageInfo_PackageName proto.InternalMessageInfo

func (m *PackageName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Package struct {
	Name                 string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Channels             []*Channel `protobuf:"bytes,2,rep,name=channels,proto3" json:"channels,omitempty"`
	DefaultChannelName   string     `protobuf:"bytes,3,opt,name=defaultChannelName,proto3" json:"defaultChannelName,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Package) Reset()         { *m = Package{} }
func (m *Package) String() string { return proto.CompactTextString(m) }
func (*Package) ProtoMessage()    {}
func (*Package) Descriptor() ([]byte, []int) {
	return fileDescriptor_registry_5236593735313b11, []int{2}
}
func (m *Package) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Package.Unmarshal(m, b)
}
func (m *Package) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Package.Marshal(b, m, deterministic)
}
func (dst *Package) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Package.Merge(dst, src)
}
func (m *Package) XXX_Size() int {
	return xxx_messageInfo_Package.Size(m)
}
func (m *Package) XXX_DiscardUnknown() {
	xxx_messageInfo_Package.DiscardUnknown(m)
}

var xxx_messageInfo_Package proto.InternalMessageInfo

func (m *Package) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Package) GetChannels() []*Channel {
	if m != nil {
		return m.Channels
	}
	return nil
}

func (m *Package) GetDefaultChannelName() string {
	if m != nil {
		return m.DefaultChannelName
	}
	return ""
}

type Bundle struct {
	CsvName              string   `protobuf:"bytes,1,opt,name=csvName,proto3" json:"csvName,omitempty"`
	PackageName          string   `protobuf:"bytes,2,opt,name=packageName,proto3" json:"packageName,omitempty"`
	ChannelName          string   `protobuf:"bytes,3,opt,name=channelName,proto3" json:"channelName,omitempty"`
	CsvJson              string   `protobuf:"bytes,4,opt,name=csvJson,proto3" json:"csvJson,omitempty"`
	Object               []string `protobuf:"bytes,5,rep,name=object,proto3" json:"object,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Bundle) Reset()         { *m = Bundle{} }
func (m *Bundle) String() string { return proto.CompactTextString(m) }
func (*Bundle) ProtoMessage()    {}
func (*Bundle) Descriptor() ([]byte, []int) {
	return fileDescriptor_registry_5236593735313b11, []int{3}
}
func (m *Bundle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Bundle.Unmarshal(m, b)
}
func (m *Bundle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Bundle.Marshal(b, m, deterministic)
}
func (dst *Bundle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bundle.Merge(dst, src)
}
func (m *Bundle) XXX_Size() int {
	return xxx_messageInfo_Bundle.Size(m)
}
func (m *Bundle) XXX_DiscardUnknown() {
	xxx_messageInfo_Bundle.DiscardUnknown(m)
}

var xxx_messageInfo_Bundle proto.InternalMessageInfo

func (m *Bundle) GetCsvName() string {
	if m != nil {
		return m.CsvName
	}
	return ""
}

func (m *Bundle) GetPackageName() string {
	if m != nil {
		return m.PackageName
	}
	return ""
}

func (m *Bundle) GetChannelName() string {
	if m != nil {
		return m.ChannelName
	}
	return ""
}

func (m *Bundle) GetCsvJson() string {
	if m != nil {
		return m.CsvJson
	}
	return ""
}

func (m *Bundle) GetObject() []string {
	if m != nil {
		return m.Object
	}
	return nil
}

type ChannelEntry struct {
	PackageName          string   `protobuf:"bytes,1,opt,name=packageName,proto3" json:"packageName,omitempty"`
	ChannelName          string   `protobuf:"bytes,2,opt,name=channelName,proto3" json:"channelName,omitempty"`
	BundleName           string   `protobuf:"bytes,3,opt,name=bundleName,proto3" json:"bundleName,omitempty"`
	Replaces             string   `protobuf:"bytes,4,opt,name=replaces,proto3" json:"replaces,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelEntry) Reset()         { *m = ChannelEntry{} }
func (m *ChannelEntry) String() string { return proto.CompactTextString(m) }
func (*ChannelEntry) ProtoMessage()    {}
func (*ChannelEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_registry_5236593735313b11, []int{4}
}
func (m *ChannelEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelEntry.Unmarshal(m, b)
}
func (m *ChannelEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelEntry.Marshal(b, m, deterministic)
}
func (dst *ChannelEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelEntry.Merge(dst, src)
}
func (m *ChannelEntry) XXX_Size() int {
	return xxx_messageInfo_ChannelEntry.Size(m)
}
func (m *ChannelEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelEntry.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelEntry proto.InternalMessageInfo

func (m *ChannelEntry) GetPackageName() string {
	if m != nil {
		return m.PackageName
	}
	return ""
}

func (m *ChannelEntry) GetChannelName() string {
	if m != nil {
		return m.ChannelName
	}
	return ""
}

func (m *ChannelEntry) GetBundleName() string {
	if m != nil {
		return m.BundleName
	}
	return ""
}

func (m *ChannelEntry) GetReplaces() string {
	if m != nil {
		return m.Replaces
	}
	return ""
}

type ListPackageRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListPackageRequest) Reset()         { *m = ListPackageRequest{} }
func (m *ListPackageRequest) String() string { return proto.CompactTextString(m) }
func (*ListPackageRequest) ProtoMessage()    {}
func (*ListPackageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_registry_5236593735313b11, []int{5}
}
func (m *ListPackageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPackageRequest.Unmarshal(m, b)
}
func (m *ListPackageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPackageRequest.Marshal(b, m, deterministic)
}
func (dst *ListPackageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPackageRequest.Merge(dst, src)
}
func (m *ListPackageRequest) XXX_Size() int {
	return xxx_messageInfo_ListPackageRequest.Size(m)
}
func (m *ListPackageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPackageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListPackageRequest proto.InternalMessageInfo

type GetPackageRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPackageRequest) Reset()         { *m = GetPackageRequest{} }
func (m *GetPackageRequest) String() string { return proto.CompactTextString(m) }
func (*GetPackageRequest) ProtoMessage()    {}
func (*GetPackageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_registry_5236593735313b11, []int{6}
}
func (m *GetPackageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPackageRequest.Unmarshal(m, b)
}
func (m *GetPackageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPackageRequest.Marshal(b, m, deterministic)
}
func (dst *GetPackageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPackageRequest.Merge(dst, src)
}
func (m *GetPackageRequest) XXX_Size() int {
	return xxx_messageInfo_GetPackageRequest.Size(m)
}
func (m *GetPackageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPackageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPackageRequest proto.InternalMessageInfo

func (m *GetPackageRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetBundleRequest struct {
	PkgName              string   `protobuf:"bytes,1,opt,name=pkgName,proto3" json:"pkgName,omitempty"`
	ChannelName          string   `protobuf:"bytes,2,opt,name=channelName,proto3" json:"channelName,omitempty"`
	CsvName              string   `protobuf:"bytes,3,opt,name=csvName,proto3" json:"csvName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBundleRequest) Reset()         { *m = GetBundleRequest{} }
func (m *GetBundleRequest) String() string { return proto.CompactTextString(m) }
func (*GetBundleRequest) ProtoMessage()    {}
func (*GetBundleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_registry_5236593735313b11, []int{7}
}
func (m *GetBundleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBundleRequest.Unmarshal(m, b)
}
func (m *GetBundleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBundleRequest.Marshal(b, m, deterministic)
}
func (dst *GetBundleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBundleRequest.Merge(dst, src)
}
func (m *GetBundleRequest) XXX_Size() int {
	return xxx_messageInfo_GetBundleRequest.Size(m)
}
func (m *GetBundleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBundleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBundleRequest proto.InternalMessageInfo

func (m *GetBundleRequest) GetPkgName() string {
	if m != nil {
		return m.PkgName
	}
	return ""
}

func (m *GetBundleRequest) GetChannelName() string {
	if m != nil {
		return m.ChannelName
	}
	return ""
}

func (m *GetBundleRequest) GetCsvName() string {
	if m != nil {
		return m.CsvName
	}
	return ""
}

type GetBundleInChannelRequest struct {
	PkgName              string   `protobuf:"bytes,1,opt,name=pkgName,proto3" json:"pkgName,omitempty"`
	ChannelName          string   `protobuf:"bytes,2,opt,name=channelName,proto3" json:"channelName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBundleInChannelRequest) Reset()         { *m = GetBundleInChannelRequest{} }
func (m *GetBundleInChannelRequest) String() string { return proto.CompactTextString(m) }
func (*GetBundleInChannelRequest) ProtoMessage()    {}
func (*GetBundleInChannelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_registry_5236593735313b11, []int{8}
}
func (m *GetBundleInChannelRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBundleInChannelRequest.Unmarshal(m, b)
}
func (m *GetBundleInChannelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBundleInChannelRequest.Marshal(b, m, deterministic)
}
func (dst *GetBundleInChannelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBundleInChannelRequest.Merge(dst, src)
}
func (m *GetBundleInChannelRequest) XXX_Size() int {
	return xxx_messageInfo_GetBundleInChannelRequest.Size(m)
}
func (m *GetBundleInChannelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBundleInChannelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBundleInChannelRequest proto.InternalMessageInfo

func (m *GetBundleInChannelRequest) GetPkgName() string {
	if m != nil {
		return m.PkgName
	}
	return ""
}

func (m *GetBundleInChannelRequest) GetChannelName() string {
	if m != nil {
		return m.ChannelName
	}
	return ""
}

type GetAllReplacementsRequest struct {
	CsvName              string   `protobuf:"bytes,1,opt,name=csvName,proto3" json:"csvName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllReplacementsRequest) Reset()         { *m = GetAllReplacementsRequest{} }
func (m *GetAllReplacementsRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllReplacementsRequest) ProtoMessage()    {}
func (*GetAllReplacementsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_registry_5236593735313b11, []int{9}
}
func (m *GetAllReplacementsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAllReplacementsRequest.Unmarshal(m, b)
}
func (m *GetAllReplacementsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAllReplacementsRequest.Marshal(b, m, deterministic)
}
func (dst *GetAllReplacementsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllReplacementsRequest.Merge(dst, src)
}
func (m *GetAllReplacementsRequest) XXX_Size() int {
	return xxx_messageInfo_GetAllReplacementsRequest.Size(m)
}
func (m *GetAllReplacementsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllReplacementsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllReplacementsRequest proto.InternalMessageInfo

func (m *GetAllReplacementsRequest) GetCsvName() string {
	if m != nil {
		return m.CsvName
	}
	return ""
}

type GetReplacementRequest struct {
	CsvName              string   `protobuf:"bytes,1,opt,name=csvName,proto3" json:"csvName,omitempty"`
	PkgName              string   `protobuf:"bytes,2,opt,name=pkgName,proto3" json:"pkgName,omitempty"`
	ChannelName          string   `protobuf:"bytes,3,opt,name=channelName,proto3" json:"channelName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetReplacementRequest) Reset()         { *m = GetReplacementRequest{} }
func (m *GetReplacementRequest) String() string { return proto.CompactTextString(m) }
func (*GetReplacementRequest) ProtoMessage()    {}
func (*GetReplacementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_registry_5236593735313b11, []int{10}
}
func (m *GetReplacementRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetReplacementRequest.Unmarshal(m, b)
}
func (m *GetReplacementRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetReplacementRequest.Marshal(b, m, deterministic)
}
func (dst *GetReplacementRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReplacementRequest.Merge(dst, src)
}
func (m *GetReplacementRequest) XXX_Size() int {
	return xxx_messageInfo_GetReplacementRequest.Size(m)
}
func (m *GetReplacementRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReplacementRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetReplacementRequest proto.InternalMessageInfo

func (m *GetReplacementRequest) GetCsvName() string {
	if m != nil {
		return m.CsvName
	}
	return ""
}

func (m *GetReplacementRequest) GetPkgName() string {
	if m != nil {
		return m.PkgName
	}
	return ""
}

func (m *GetReplacementRequest) GetChannelName() string {
	if m != nil {
		return m.ChannelName
	}
	return ""
}

type GetAllProvidersRequest struct {
	Group                string   `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Kind                 string   `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	Plural               string   `protobuf:"bytes,4,opt,name=plural,proto3" json:"plural,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllProvidersRequest) Reset()         { *m = GetAllProvidersRequest{} }
func (m *GetAllProvidersRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllProvidersRequest) ProtoMessage()    {}
func (*GetAllProvidersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_registry_5236593735313b11, []int{11}
}
func (m *GetAllProvidersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAllProvidersRequest.Unmarshal(m, b)
}
func (m *GetAllProvidersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAllProvidersRequest.Marshal(b, m, deterministic)
}
func (dst *GetAllProvidersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllProvidersRequest.Merge(dst, src)
}
func (m *GetAllProvidersRequest) XXX_Size() int {
	return xxx_messageInfo_GetAllProvidersRequest.Size(m)
}
func (m *GetAllProvidersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllProvidersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllProvidersRequest proto.InternalMessageInfo

func (m *GetAllProvidersRequest) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *GetAllProvidersRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *GetAllProvidersRequest) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *GetAllProvidersRequest) GetPlural() string {
	if m != nil {
		return m.Plural
	}
	return ""
}

type GetLatestProvidersRequest struct {
	Group                string   `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Kind                 string   `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	Plural               string   `protobuf:"bytes,4,opt,name=plural,proto3" json:"plural,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetLatestProvidersRequest) Reset()         { *m = GetLatestProvidersRequest{} }
func (m *GetLatestProvidersRequest) String() string { return proto.CompactTextString(m) }
func (*GetLatestProvidersRequest) ProtoMessage()    {}
func (*GetLatestProvidersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_registry_5236593735313b11, []int{12}
}
func (m *GetLatestProvidersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetLatestProvidersRequest.Unmarshal(m, b)
}
func (m *GetLatestProvidersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetLatestProvidersRequest.Marshal(b, m, deterministic)
}
func (dst *GetLatestProvidersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLatestProvidersRequest.Merge(dst, src)
}
func (m *GetLatestProvidersRequest) XXX_Size() int {
	return xxx_messageInfo_GetLatestProvidersRequest.Size(m)
}
func (m *GetLatestProvidersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLatestProvidersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetLatestProvidersRequest proto.InternalMessageInfo

func (m *GetLatestProvidersRequest) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *GetLatestProvidersRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *GetLatestProvidersRequest) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *GetLatestProvidersRequest) GetPlural() string {
	if m != nil {
		return m.Plural
	}
	return ""
}

type GetDefaultProviderRequest struct {
	Group                string   `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Kind                 string   `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	Plural               string   `protobuf:"bytes,4,opt,name=plural,proto3" json:"plural,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDefaultProviderRequest) Reset()         { *m = GetDefaultProviderRequest{} }
func (m *GetDefaultProviderRequest) String() string { return proto.CompactTextString(m) }
func (*GetDefaultProviderRequest) ProtoMessage()    {}
func (*GetDefaultProviderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_registry_5236593735313b11, []int{13}
}
func (m *GetDefaultProviderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDefaultProviderRequest.Unmarshal(m, b)
}
func (m *GetDefaultProviderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDefaultProviderRequest.Marshal(b, m, deterministic)
}
func (dst *GetDefaultProviderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDefaultProviderRequest.Merge(dst, src)
}
func (m *GetDefaultProviderRequest) XXX_Size() int {
	return xxx_messageInfo_GetDefaultProviderRequest.Size(m)
}
func (m *GetDefaultProviderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDefaultProviderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDefaultProviderRequest proto.InternalMessageInfo

func (m *GetDefaultProviderRequest) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *GetDefaultProviderRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *GetDefaultProviderRequest) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *GetDefaultProviderRequest) GetPlural() string {
	if m != nil {
		return m.Plural
	}
	return ""
}

type GetCatalogChecksumRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCatalogChecksumRequest) Reset()         { *m = GetCatalogChecksumRequest{} }
func (m *GetCatalogChecksumRequest) String() string { return proto.CompactTextString(m) }
func (*GetCatalogChecksumRequest) ProtoMessage()    {}
func (*GetCatalogChecksumRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_registry_5236593735313b11, []int{14}
}
func (m *GetCatalogChecksumRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCatalogChecksumRequest.Unmarshal(m, b)
}
func (m *GetCatalogChecksumRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCatalogChecksumRequest.Marshal(b, m, deterministic)
}
func (dst *GetCatalogChecksumRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCatalogChecksumRequest.Merge(dst, src)
}
func (m *GetCatalogChecksumRequest) XXX_Size() int {
	return xxx_messageInfo_GetCatalogChecksumRequest.Size(m)
}
func (m *GetCatalogChecksumRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCatalogChecksumRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCatalogChecksumRequest proto.InternalMessageInfo

type CatalogChecksum struct {
	Checksum             string   `protobuf:"bytes,1,opt,name=checksum,proto3" json:"checksum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CatalogChecksum) Reset()         { *m = CatalogChecksum{} }
func (m *CatalogChecksum) String() string { return proto.CompactTextString(m) }
func (*CatalogChecksum) ProtoMessage()    {}
func (*CatalogChecksum) Descriptor() ([]byte, []int) {
	return fileDescriptor_registry_5236593735313b11, []int{15}
}
func (m *CatalogChecksum) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CatalogChecksum.Unmarshal(m, b)
}
func (m *CatalogChecksum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CatalogChecksum.Marshal(b, m, deterministic)
}
func (dst *CatalogChecksum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CatalogChecksum.Merge(dst, src)
}
func (m *CatalogChecksum) XXX_Size() int {
	return xxx_messageInfo_CatalogChecksum.Size(m)
}
func (m *CatalogChecksum) XXX_DiscardUnknown() {
	xxx_messageInfo_CatalogChecksum.DiscardUnknown(m)
}

var xxx_messageInfo_CatalogChecksum proto.InternalMessageInfo

func (m *CatalogChecksum) GetChecksum() string {
	if m != nil {
		return m.Checksum
	}
	return ""
}

func init() {
	proto.RegisterType((*Channel)(nil), "api.Channel")
	proto.RegisterType((*PackageName)(nil), "api.PackageName")
	proto.RegisterType((*Package)(nil), "api.Package")
	proto.RegisterType((*Bundle)(nil), "api.Bundle")
	proto.RegisterType((*ChannelEntry)(nil), "api.ChannelEntry")
	proto.RegisterType((*ListPackageRequest)(nil), "api.ListPackageRequest")
	proto.RegisterType((*GetPackageRequest)(nil), "api.GetPackageRequest")
	proto.RegisterType((*GetBundleRequest)(nil), "api.GetBundleRequest")
	proto.RegisterType((*GetBundleInChannelRequest)(nil), "api.GetBundleInChannelRequest")
	proto.RegisterType((*GetAllReplacementsRequest)(nil), "api.GetAllReplacementsRequest")
	proto.RegisterType((*GetReplacementRequest)(nil), "api.GetReplacementRequest")
	proto.RegisterType((*GetAllProvidersRequest)(nil), "api.GetAllProvidersRequest")
	proto.RegisterType((*GetLatestProvidersRequest)(nil), "api.GetLatestProvidersRequest")
	proto.RegisterType((*GetDefaultProviderRequest)(nil), "api.GetDefaultProviderRequest")
	proto.RegisterType((*GetCatalogChecksumRequest)(nil), "api.GetCatalogChecksumRequest")
	proto.RegisterType((*CatalogChecksum)(nil), "api.CatalogChecksum")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RegistryClient is the client API for Registry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegistryClient interface {
	ListPackages(ctx context.Context, in *ListPackageRequest, opts ...grpc.CallOption) (Registry_ListPackagesClient, error)
	GetPackage(ctx context.Context, in *GetPackageRequest, opts ...grpc.CallOption) (*Package, error)
	GetBundle(ctx context.Context, in *GetBundleRequest, opts ...grpc.CallOption) (*Bundle, error)
	GetBundleForChannel(ctx context.Context, in *GetBundleInChannelRequest, opts ...grpc.CallOption) (*Bundle, error)
	GetChannelEntriesThatReplace(ctx context.Context, in *GetAllReplacementsRequest, opts ...grpc.CallOption) (Registry_GetChannelEntriesThatReplaceClient, error)
	GetBundleThatReplaces(ctx context.Context, in *GetReplacementRequest, opts ...grpc.CallOption) (*Bundle, error)
	GetChannelEntriesThatProvide(ctx context.Context, in *GetAllProvidersRequest, opts ...grpc.CallOption) (Registry_GetChannelEntriesThatProvideClient, error)
	GetLatestChannelEntriesThatProvide(ctx context.Context, in *GetLatestProvidersRequest, opts ...grpc.CallOption) (Registry_GetLatestChannelEntriesThatProvideClient, error)
	GetDefaultBundleThatProvides(ctx context.Context, in *GetDefaultProviderRequest, opts ...grpc.CallOption) (*Bundle, error)
	GetCatalogChecksum(ctx context.Context, in *GetCatalogChecksumRequest, opts ...grpc.CallOption) (*CatalogChecksum, error)
}

type registryClient struct {
	cc *grpc.ClientConn
}

func NewRegistryClient(cc *grpc.ClientConn) RegistryClient {
	return &registryClient{cc}
}

func (c *registryClient) ListPackages(ctx context.Context, in *ListPackageRequest, opts ...grpc.CallOption) (Registry_ListPackagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Registry_serviceDesc.Streams[0], "/api.Registry/ListPackages", opts...)
	if err != nil {
		return nil, err
	}
	x := &registryListPackagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Registry_ListPackagesClient interface {
	Recv() (*PackageName, error)
	grpc.ClientStream
}

type registryListPackagesClient struct {
	grpc.ClientStream
}

func (x *registryListPackagesClient) Recv() (*PackageName, error) {
	m := new(PackageName)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *registryClient) GetPackage(ctx context.Context, in *GetPackageRequest, opts ...grpc.CallOption) (*Package, error) {
	out := new(Package)
	err := c.cc.Invoke(ctx, "/api.Registry/GetPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) GetBundle(ctx context.Context, in *GetBundleRequest, opts ...grpc.CallOption) (*Bundle, error) {
	out := new(Bundle)
	err := c.cc.Invoke(ctx, "/api.Registry/GetBundle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) GetBundleForChannel(ctx context.Context, in *GetBundleInChannelRequest, opts ...grpc.CallOption) (*Bundle, error) {
	out := new(Bundle)
	err := c.cc.Invoke(ctx, "/api.Registry/GetBundleForChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) GetChannelEntriesThatReplace(ctx context.Context, in *GetAllReplacementsRequest, opts ...grpc.CallOption) (Registry_GetChannelEntriesThatReplaceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Registry_serviceDesc.Streams[1], "/api.Registry/GetChannelEntriesThatReplace", opts...)
	if err != nil {
		return nil, err
	}
	x := &registryGetChannelEntriesThatReplaceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Registry_GetChannelEntriesThatReplaceClient interface {
	Recv() (*ChannelEntry, error)
	grpc.ClientStream
}

type registryGetChannelEntriesThatReplaceClient struct {
	grpc.ClientStream
}

func (x *registryGetChannelEntriesThatReplaceClient) Recv() (*ChannelEntry, error) {
	m := new(ChannelEntry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *registryClient) GetBundleThatReplaces(ctx context.Context, in *GetReplacementRequest, opts ...grpc.CallOption) (*Bundle, error) {
	out := new(Bundle)
	err := c.cc.Invoke(ctx, "/api.Registry/GetBundleThatReplaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) GetChannelEntriesThatProvide(ctx context.Context, in *GetAllProvidersRequest, opts ...grpc.CallOption) (Registry_GetChannelEntriesThatProvideClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Registry_serviceDesc.Streams[2], "/api.Registry/GetChannelEntriesThatProvide", opts...)
	if err != nil {
		return nil, err
	}
	x := &registryGetChannelEntriesThatProvideClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Registry_GetChannelEntriesThatProvideClient interface {
	Recv() (*ChannelEntry, error)
	grpc.ClientStream
}

type registryGetChannelEntriesThatProvideClient struct {
	grpc.ClientStream
}

func (x *registryGetChannelEntriesThatProvideClient) Recv() (*ChannelEntry, error) {
	m := new(ChannelEntry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *registryClient) GetLatestChannelEntriesThatProvide(ctx context.Context, in *GetLatestProvidersRequest, opts ...grpc.CallOption) (Registry_GetLatestChannelEntriesThatProvideClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Registry_serviceDesc.Streams[3], "/api.Registry/GetLatestChannelEntriesThatProvide", opts...)
	if err != nil {
		return nil, err
	}
	x := &registryGetLatestChannelEntriesThatProvideClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Registry_GetLatestChannelEntriesThatProvideClient interface {
	Recv() (*ChannelEntry, error)
	grpc.ClientStream
}

type registryGetLatestChannelEntriesThatProvideClient struct {
	grpc.ClientStream
}

func (x *registryGetLatestChannelEntriesThatProvideClient) Recv() (*ChannelEntry, error) {
	m := new(ChannelEntry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *registryClient) GetDefaultBundleThatProvides(ctx context.Context, in *GetDefaultProviderRequest, opts ...grpc.CallOption) (*Bundle, error) {
	out := new(Bundle)
	err := c.cc.Invoke(ctx, "/api.Registry/GetDefaultBundleThatProvides", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) GetCatalogChecksum(ctx context.Context, in *GetCatalogChecksumRequest, opts ...grpc.CallOption) (*CatalogChecksum, error) {
	out := new(CatalogChecksum)
	err := c.cc.Invoke(ctx, "/api.Registry/GetCatalogChecksum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistryServer is the server API for Registry service.
type RegistryServer interface {
	ListPackages(*ListPackageRequest, Registry_ListPackagesServer) error
	GetPackage(context.Context, *GetPackageRequest) (*Package, error)
	GetBundle(context.Context, *GetBundleRequest) (*Bundle, error)
	GetBundleForChannel(context.Context, *GetBundleInChannelRequest) (*Bundle, error)
	GetChannelEntriesThatReplace(*GetAllReplacementsRequest, Registry_GetChannelEntriesThatReplaceServer) error
	GetBundleThatReplaces(context.Context, *GetReplacementRequest) (*Bundle, error)
	GetChannelEntriesThatProvide(*GetAllProvidersRequest, Registry_GetChannelEntriesThatProvideServer) error
	GetLatestChannelEntriesThatProvide(*GetLatestProvidersRequest, Registry_GetLatestChannelEntriesThatProvideServer) error
	GetDefaultBundleThatProvides(context.Context, *GetDefaultProviderRequest) (*Bundle, error)
	GetCatalogChecksum(context.Context, *GetCatalogChecksumRequest) (*CatalogChecksum, error)
}

func RegisterRegistryServer(s *grpc.Server, srv RegistryServer) {
	s.RegisterService(&_Registry_serviceDesc, srv)
}

func _Registry_ListPackages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListPackageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RegistryServer).ListPackages(m, &registryListPackagesServer{stream})
}

type Registry_ListPackagesServer interface {
	Send(*PackageName) error
	grpc.ServerStream
}

type registryListPackagesServer struct {
	grpc.ServerStream
}

func (x *registryListPackagesServer) Send(m *PackageName) error {
	return x.ServerStream.SendMsg(m)
}

func _Registry_GetPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).GetPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Registry/GetPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).GetPackage(ctx, req.(*GetPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_GetBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).GetBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Registry/GetBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).GetBundle(ctx, req.(*GetBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_GetBundleForChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBundleInChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).GetBundleForChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Registry/GetBundleForChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).GetBundleForChannel(ctx, req.(*GetBundleInChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_GetChannelEntriesThatReplace_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllReplacementsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RegistryServer).GetChannelEntriesThatReplace(m, &registryGetChannelEntriesThatReplaceServer{stream})
}

type Registry_GetChannelEntriesThatReplaceServer interface {
	Send(*ChannelEntry) error
	grpc.ServerStream
}

type registryGetChannelEntriesThatReplaceServer struct {
	grpc.ServerStream
}

func (x *registryGetChannelEntriesThatReplaceServer) Send(m *ChannelEntry) error {
	return x.ServerStream.SendMsg(m)
}

func _Registry_GetBundleThatReplaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReplacementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).GetBundleThatReplaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Registry/GetBundleThatReplaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).GetBundleThatReplaces(ctx, req.(*GetReplacementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_GetChannelEntriesThatProvide_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllProvidersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RegistryServer).GetChannelEntriesThatProvide(m, &registryGetChannelEntriesThatProvideServer{stream})
}

type Registry_GetChannelEntriesThatProvideServer interface {
	Send(*ChannelEntry) error
	grpc.ServerStream
}

type registryGetChannelEntriesThatProvideServer struct {
	grpc.ServerStream
}

func (x *registryGetChannelEntriesThatProvideServer) Send(m *ChannelEntry) error {
	return x.ServerStream.SendMsg(m)
}

func _Registry_GetLatestChannelEntriesThatProvide_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetLatestProvidersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RegistryServer).GetLatestChannelEntriesThatProvide(m, &registryGetLatestChannelEntriesThatProvideServer{stream})
}

type Registry_GetLatestChannelEntriesThatProvideServer interface {
	Send(*ChannelEntry) error
	grpc.ServerStream
}

type registryGetLatestChannelEntriesThatProvideServer struct {
	grpc.ServerStream
}

func (x *registryGetLatestChannelEntriesThatProvideServer) Send(m *ChannelEntry) error {
	return x.ServerStream.SendMsg(m)
}

func _Registry_GetDefaultBundleThatProvides_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).GetDefaultBundleThatProvides(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Registry/GetDefaultBundleThatProvides",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).GetDefaultBundleThatProvides(ctx, req.(*GetDefaultProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_GetCatalogChecksum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCatalogChecksumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).GetCatalogChecksum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Registry/GetCatalogChecksum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).GetCatalogChecksum(ctx, req.(*GetCatalogChecksumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Registry",
	HandlerType: (*RegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPackage",
			Handler:    _Registry_GetPackage_Handler,
		},
		{
			MethodName: "GetBundle",
			Handler:    _Registry_GetBundle_Handler,
		},
		{
			MethodName: "GetBundleForChannel",
			Handler:    _Registry_GetBundleForChannel_Handler,
		},
		{
			MethodName: "GetBundleThatReplaces",
			Handler:    _Registry_GetBundleThatReplaces_Handler,
		},
		{
			MethodName: "GetDefaultBundleThatProvides",
			Handler:    _Registry_GetDefaultBundleThatProvides_Handler,
		},
		{
			MethodName: "GetCatalogChecksum",
			Handler:    _Registry_GetCatalogChecksum_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListPackages",
			Handler:       _Registry_ListPackages_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetChannelEntriesThatReplace",
			Handler:       _Registry_GetChannelEntriesThatReplace_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetChannelEntriesThatProvide",
			Handler:       _Registry_GetChannelEntriesThatProvide_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetLatestChannelEntriesThatProvide",
			Handler:       _Registry_GetLatestChannelEntriesThatProvide_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "registry.proto",
}

func init() { proto.RegisterFile("registry.proto", fileDescriptor_registry_5236593735313b11) }

var fileDescriptor_registry_5236593735313b11 = []byte{
	// 663 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0xcd, 0x8e, 0xd3, 0x3c,
	0x14, 0x6d, 0xda, 0xe9, 0xdf, 0x6d, 0xf5, 0x7d, 0x33, 0xa6, 0x53, 0x42, 0x06, 0x8d, 0x8a, 0x37,
	0x74, 0x43, 0x05, 0x03, 0x88, 0x15, 0x0b, 0xa6, 0x03, 0x15, 0xa8, 0xa0, 0x51, 0x04, 0x62, 0xc1,
	0xca, 0x4d, 0x4d, 0x1b, 0x9a, 0x26, 0x21, 0x76, 0x3a, 0x9a, 0x97, 0x60, 0xcd, 0xeb, 0xf1, 0x26,
	0x28, 0x8e, 0x93, 0x38, 0x3f, 0x65, 0x90, 0x90, 0x60, 0x97, 0x7b, 0xed, 0x7b, 0xce, 0xb9, 0xf6,
	0x3d, 0x6e, 0xe1, 0xbf, 0x80, 0xae, 0x6c, 0xc6, 0x83, 0xeb, 0x89, 0x1f, 0x78, 0xdc, 0x43, 0x0d,
	0xe2, 0xdb, 0xf8, 0x19, 0xb4, 0xa7, 0x6b, 0xe2, 0xba, 0xd4, 0x41, 0x08, 0x0e, 0x5c, 0xb2, 0xa5,
	0xba, 0x36, 0xd2, 0xc6, 0x5d, 0x53, 0x7c, 0x23, 0x1d, 0xda, 0x16, 0xdb, 0xbd, 0x8b, 0xd2, 0x75,
	0x91, 0x4e, 0x42, 0x7c, 0x0f, 0x7a, 0x97, 0xc4, 0xda, 0x90, 0x15, 0x8d, 0xc2, 0xaa, 0x62, 0x7c,
	0x05, 0x6d, 0xb9, 0xa5, 0x12, 0x7b, 0x0c, 0x1d, 0x2b, 0xa6, 0x66, 0x7a, 0x7d, 0xd4, 0x18, 0xf7,
	0xce, 0xfa, 0x13, 0xe2, 0xdb, 0x13, 0xa9, 0xc7, 0x4c, 0x57, 0xd1, 0x04, 0xd0, 0x92, 0x7e, 0x26,
	0xa1, 0xc3, 0xe5, 0x9a, 0x10, 0xd4, 0x10, 0x58, 0x15, 0x2b, 0xf8, 0xbb, 0x06, 0xad, 0xf3, 0xd0,
	0x5d, 0x3a, 0xb9, 0x06, 0xb4, 0x5c, 0x03, 0x68, 0x04, 0x3d, 0x3f, 0x6b, 0x40, 0xb6, 0xa7, 0xa6,
	0xa2, 0x1d, 0x56, 0x89, 0x4f, 0x4d, 0x49, 0xf4, 0x37, 0xcc, 0x73, 0xf5, 0x83, 0x14, 0x3d, 0x0a,
	0xd1, 0x10, 0x5a, 0xde, 0xe2, 0x0b, 0xb5, 0xb8, 0xde, 0x1c, 0x35, 0xc6, 0x5d, 0x53, 0x46, 0xf8,
	0x9b, 0x06, 0x7d, 0x29, 0xf5, 0xa5, 0xcb, 0x83, 0xeb, 0xa2, 0x0c, 0xed, 0x46, 0x19, 0xf5, 0xb2,
	0x8c, 0x53, 0x80, 0x85, 0x68, 0x57, 0xd1, 0xa9, 0x64, 0x90, 0x01, 0x9d, 0x80, 0xfa, 0x0e, 0xb1,
	0x28, 0x93, 0x3a, 0xd3, 0x18, 0x0f, 0x00, 0xcd, 0x6d, 0xc6, 0xe5, 0x45, 0x99, 0xf4, 0x6b, 0x48,
	0x19, 0xc7, 0xf7, 0xe1, 0x68, 0x46, 0x0b, 0xc9, 0xca, 0x3b, 0x5e, 0xc3, 0xe1, 0x8c, 0xf2, 0xf8,
	0xb0, 0x93, 0x7d, 0x3a, 0xb4, 0xfd, 0xcd, 0x4a, 0x3d, 0x73, 0x19, 0xfe, 0x46, 0x2b, 0xca, 0x7d,
	0x35, 0xf2, 0x03, 0xf7, 0x11, 0xee, 0xa4, 0x4c, 0xaf, 0xdd, 0x64, 0x48, 0xfe, 0x9c, 0x12, 0x3f,
	0x15, 0xc0, 0x2f, 0x1c, 0xc7, 0x8c, 0xcf, 0x64, 0x4b, 0x5d, 0xce, 0x14, 0xe0, 0xea, 0xf9, 0xc1,
	0x5b, 0x38, 0x9e, 0x51, 0xae, 0xd4, 0xdc, 0x58, 0xa2, 0xaa, 0xac, 0xff, 0x52, 0x65, 0x79, 0xd4,
	0x30, 0x87, 0x61, 0xac, 0xf2, 0x32, 0xf0, 0x76, 0xf6, 0x92, 0x06, 0xa9, 0xc4, 0x01, 0x34, 0x57,
	0x81, 0x17, 0xfa, 0x92, 0x2d, 0x0e, 0x22, 0xae, 0x1d, 0x0d, 0x98, 0xed, 0xb9, 0x09, 0x97, 0x0c,
	0xa3, 0x6b, 0xdc, 0xd8, 0xee, 0x52, 0x92, 0x88, 0xef, 0x68, 0x5c, 0x7d, 0x27, 0x0c, 0x88, 0x23,
	0xe7, 0x43, 0x46, 0xf8, 0x4a, 0x9c, 0xcd, 0x9c, 0x70, 0xca, 0xf8, 0x3f, 0x20, 0xbe, 0x88, 0xbd,
	0x9d, 0x30, 0xff, 0x0d, 0xe2, 0x13, 0x41, 0x3c, 0x25, 0x9c, 0x38, 0xde, 0x6a, 0xba, 0xa6, 0xd6,
	0x86, 0x85, 0xdb, 0xc4, 0x16, 0x0f, 0xe0, 0xff, 0xc2, 0x4a, 0xe4, 0x2d, 0x4b, 0x7e, 0x4b, 0x39,
	0x69, 0x7c, 0xf6, 0xa3, 0x09, 0x1d, 0x53, 0x3e, 0xba, 0xe8, 0x39, 0xf4, 0x15, 0xa3, 0x31, 0x74,
	0x5b, 0x3c, 0x76, 0x65, 0xef, 0x19, 0x87, 0x62, 0x41, 0x79, 0x5c, 0x71, 0xed, 0xa1, 0x86, 0x9e,
	0x00, 0x64, 0x8e, 0x44, 0x43, 0xb1, 0xa7, 0x64, 0x51, 0xa3, 0xaf, 0xd6, 0xe2, 0x1a, 0x7a, 0x04,
	0xdd, 0xd4, 0x34, 0xe8, 0x38, 0x29, 0xca, 0xd9, 0xd5, 0xe8, 0x89, 0x74, 0x9c, 0xc3, 0x35, 0x74,
	0x01, 0xb7, 0xd2, 0x2d, 0xaf, 0xbc, 0x20, 0xf9, 0x75, 0x38, 0xcd, 0x17, 0x17, 0x1d, 0x58, 0x44,
	0xf9, 0x00, 0x77, 0xa3, 0x63, 0xcc, 0x5e, 0x3a, 0x9b, 0xb2, 0xf7, 0x6b, 0x92, 0xf8, 0x25, 0x83,
	0xab, 0xf6, 0x9d, 0x71, 0xa4, 0xfe, 0x14, 0x88, 0x97, 0x52, 0x9c, 0xc2, 0xb9, 0x30, 0x5d, 0xcc,
	0xa2, 0xc0, 0x31, 0x64, 0x24, 0x78, 0x65, 0x43, 0x16, 0xa5, 0x99, 0x7b, 0xa4, 0xc9, 0x29, 0x43,
	0x27, 0x8a, 0xb4, 0xe2, 0xcc, 0xef, 0xd3, 0xf5, 0x09, 0x70, 0xea, 0x93, 0xfd, 0xc8, 0x69, 0xd3,
	0xd5, 0x86, 0xda, 0x07, 0xfe, 0x56, 0x08, 0x96, 0x5e, 0xc8, 0x7a, 0x97, 0xe5, 0x2c, 0x83, 0xad,
	0xb6, 0x4b, 0xb1, 0xff, 0x39, 0xa0, 0xf2, 0x84, 0x67, 0x20, 0xd5, 0xa3, 0x6f, 0x0c, 0x62, 0x6d,
	0xf9, 0x45, 0x5c, 0x5b, 0xb4, 0xc4, 0x9f, 0x89, 0xc7, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xe3,
	0x6a, 0x68, 0x6d, 0x5e, 0x08, 0x00, 0x00,
}
